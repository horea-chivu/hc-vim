#!/bin/bash

# Bash script for setting up configurations and plugins for Vim.

echo "
 ██░ ██  ▄████▄      ██▒   █▓ ██▓ ███▄ ▄███▓
 ██░ ██▒▒██▀ ▀█     ▓██░   █▒▓██▒▓██▒▀█▀ ██▒
▒██▀▀██░▒▓█    ▄     ▓██  █▒░▒██▒▓██    ▓██░
░▓█ ░██ ▒▓▓▄ ▄██▒     ▒██ █░░░██░▒██    ▒██ 
░▓█▒░██▓▒ ▓███▀ ░      ▒▀█░  ░██░▒██▒   ░██▒
 ▒ ░░▒░▒░ ░▒ ▒  ░      ░ ▐░  ░▓  ░ ▒░   ░  ░
 ▒ ░▒░ ░  ░  ▒         ░ ░░   ▒ ░░  ░      ░
 ░  ░░ ░░                ░░   ▒ ░░      ░   
 ░  ░  ░░ ░               ░   ░         ░   
        ░                ░                  
"

echo "
-- Cloning the hc-vim repository to ~/.hc-vim
"
git clone https://github.com/horea-chivu/hc-vim ~/.hc-vim

# If is Mac OS
if [ "$(uname)" == "Darwin" ]; then
    # Do something under Mac OS X platform

    echo "

    #### IMPORTANT ####

    You will need to run every command from ~/.hc-vim/mac-dependencies
    before you continue!!

    "

    while true; do
        read -p "Do you installed the dependencies?[Y/n]: " yn
        case $yn in
            [Yy]* ) break;;
            [Nn]* ) echo "Run it then come back later!"; exit;;
            * ) echo "Please answer Y(Yes) or n(no).";;
        esac
    done

    declare -a FILES_TO_BACKUP=(.vim .vimrc .eslintrc)

# If is Linux
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    # Do something under GNU/Linux platform

    echo "

    #### IMPORTANT ####

    Please accept the execution of ubuntu-dependencies file.
    If you want todo it later, you can run the following command yourself:
    --> bash ~/.hc-vim/ubuntu-dependencies

    ! Mandatory for vim to have correct fonts, YouCompleteMe to work
    and to have some linters working!

    ! Be sure your user is a sudoer when you run ubuntu-dependencies.!

    "

    while true; do
        read -p "Do you want to proceed to installing dependencies?[Y/n]: " yn
        case $yn in
            [Yy]* ) bash ~/.hc-vim/ubuntu-dependencies; break;;
            [Nn]* ) echo "Ok. Don't forget to run bash ~/.hc-vim/ubuntu-dependencies later!"; break;;
            * ) echo "Please answer Y(Yes) or n(no).";;
        esac
    done

    declare -a FILES_TO_BACKUP=(.vim .vimrc .eslintrc .gtkrc-2.0)

# If Windows 32bit
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
    # Do something under 32 bits Windows NT platform

    echo "Sorry, can't do anything for you!"
    exit 1

# If Windows 64bit
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
    # Do something under 64 bits Windows NT platform

    echo "Sorry, can't do anything for you!"
    exit 1
fi

HOME_PREFIX=~/
BACKUP_PREFIX=~/.vim_backup/

# Backup old files that could possibly be replaced
echo "
-- Creating ~/.vim_backup directory(if not allready exist)
"
if [ ! -d ~/.vim_backup ]; then
    mkdir ~/.vim_backup
fi
echo "
-- Moving your existing(if exist) files to ~/.vim_backup
"
for file in ${FILES_TO_BACKUP[@]}; do
    if [ ! -e $BACKUP_PREFIX$file ]; then
        if [ -e $HOME_PREFIX$file ]; then
            mv $HOME_PREFIX$file ~/.vim_backup
        fi
    fi
done

mkdir ~/.vim
echo "
-- Creating symbolic links for the configuration files
"
ln -s ~/.hc-vim/colors ~/.vim/
ln -s ~/.hc-vim/configuration_files/.vimrc ~/
ln -s  ~/.hc-vim/configuration_files/plugins.vim ~/.vim/
ln -s  ~/.hc-vim/configuration_files/plugins_settings.vim ~/.vim/
ln -s  ~/.hc-vim/configuration_files/functions.vim ~/.vim/

# 
ln -s ~/.hc-vim/syntax ~/.vim/

echo "
-- Creating custom configuration files if not exist
"
# If there are NOT any user settings
if [ ! -d ~/.vim.user ]; then
    mkdir ~/.vim.user

    cp ~/.hc-vim/configuration_files/.vim.user.before ~/.vim.user/
    cp ~/.hc-vim/configuration_files/.vim.user.after ~/.vim.user/
    cp ~/.hc-vim/configuration_files/.vim.user.settings ~/.vim.user/
    cp ~/.hc-vim/configuration_files/.vim.user.plugins ~/.vim.user/
    cp ~/.hc-vim/configuration_files/.vim.user.plugins_settings ~/.vim.user/

    mkdir ~/.vim.user/UltiSnips
    ln -s ~/.vim.user/UltiSnips ~/.vim/

# If there are user settings
else
    if [ ! -e ~/.vim.user/.vim.user.before ]; then
        cp ~/.hc-vim/configuration_files/.vim.user.before ~/.vim.user/
    fi
    if [ ! -e ~/.vim.user/.vim.user.after ]; then
        cp ~/.hc-vim/configuration_files/.vim.user.after ~/.vim.user/
    fi
    if [ ! -e ~/.vim.user/.vim.user.settings ]; then
        cp ~/.hc-vim/configuration_files/.vim.user.settings ~/.vim.user/
    fi
    if [ ! -e ~/.vim.user/.vim.user.plugins ]; then
        cp ~/.hc-vim/configuration_files/.vim.user.plugins ~/.vim.user/
    fi
    if [ ! -e ~/.vim.user/.vim.user.plugins_settings ]; then
        cp ~/.hc-vim/configuration_files/.vim.user.plugins_settings ~/.vim.user/
    fi

    if [ ! -d ~/.vim.user/UltiSnips ]; then
        mkdir ~/.vim.user/UltiSnips
        ln -s ~/.vim.user/UltiSnips ~/.vim/
    else
        ln -s ~/.vim.user/UltiSnips ~/.vim/
    fi
fi

# If is Linux, configure gtk for the border problem
if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    echo "
    -- Creating symbolic links for .gtkrc-2.0
    "
    # For the borders problem in gVim
    ln -s ~/.hc-vim/needed_files/.gtkrc-2.0 ~/
fi

# Configure eslint
ln -s ~/.hc-vim/needed_files/.eslintrc ~/

echo "
-- Install Plug Vim
"
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

echo "
-- Install the plugins
"
vim +PlugInstall +qall
